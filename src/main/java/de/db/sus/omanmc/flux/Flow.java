package de.db.sus.omanmc.flux;

import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.rabbitmq.client.Delivery;
import de.db.sus.inttest.util.model.ic.InfoCtxEncoded;
import de.db.sus.inttest.util.model.ic.InfoCtxMeta;
import de.db.sus.omanmc.archiv.Client;
import de.db.sus.omanmc.archiv.Response;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.MediaType;
import org.springframework.stereotype.Component;
import org.springframework.web.reactive.function.BodyInserter;
import org.springframework.web.reactive.function.BodyInserters;
import org.springframework.web.reactive.function.client.WebClient;
import org.springframework.web.reactive.function.server.ServerResponse;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;
import reactor.rabbitmq.OutboundMessage;
import reactor.rabbitmq.Receiver;
import reactor.rabbitmq.Sender;

import javax.annotation.PostConstruct;

import java.util.Arrays;
import java.util.Map;

@Component
public class Flow {

    public static final String OMAN_IN_QUEUE = "irisplus.oman.ctrl.in.queue.it";
    public  static final String OMAN_OUT_EXCHANGE = "irisplus.oman.ctrl.out.exchange.it";

    @Autowired
    final Sender sender;
    final Flux<Delivery> dabFlux;//https://projectreactor.io/docs/core/release/api/reactor/core/publisher/Flux.html
    private static final Logger LOGGER = LoggerFactory.getLogger(Flow.class);
    Receiver receiver = new Receiver();

    Flow(Sender sender, Flux<Delivery> dabFlux) {
        this.sender = sender;
        this.dabFlux = dabFlux;
    }

    @Autowired
    private Client client;

    private ObjectMapper objectMapper = new ObjectMapper();

    @PostConstruct
    public void run() throws JsonProcessingException {

        WebClient webClient = WebClient.create();


        dabFlux
                .map(messageIcc -> {
                    String iccMessage = new String(messageIcc.getBody()).replace("'","\"");
                    LOGGER.info("1. Step:" +
                            " Received message {}", iccMessage);
                    try {
                        return objectMapper.readValue(iccMessage, InfoCtxEncoded.class);
                    } catch (JsonProcessingException e) {
                        e.printStackTrace();
                    }
                    return "aboid not found";
                })
                .doOnNext(infoCtxEncoded -> {
                    LOGGER.info("1. Step: Mapped  aboid {}", infoCtxEncoded);
                    String abonnementid = ((InfoCtxEncoded) infoCtxEncoded).getMetaData().getAbonnementid();                                                //TODO do business logic

                    requestLogicalDevice(webClient, abonnementid)
                            .onErrorResume(err -> {
                                LOGGER.error("Step 2: Error call ldm",err);
                                return Mono.empty();
                            })
                            .doOnNext(lDevice -> {
                                LOGGER.info("2. Step: Requested LDM {}", String.valueOf(lDevice));
                                requestRenderingEngine(webClient, String.valueOf(lDevice))                                                                  //TODO do business logic
//                                        .onErrorResume(ex -> Flux.error(ex))
                                        .onErrorResume( throwable -> Mono.empty()  )
                                        .doOnNext(rendered -> {
                                            LOGGER.info("3. Step: Requested render {}", String.valueOf(rendered));

                                            sender.send(Flux.range(1, 1)
                                                            .map(i -> new OutboundMessage(OMAN_OUT_EXCHANGE, "#", ("SES Command: "+rendered.toString()).getBytes())))
                                                    .onErrorResume(err -> {
                                                        LOGGER.error("Error send to ses",err);
                                                        return Mono.empty();
                                                    })
                                                    .subscribe();//TODO subscribe
                                        }).subscribe();
                            })
                            .subscribe();
                }
                )
                .subscribe();



//        dabFlux
//                .map(messageIcc -> {
//                    String iccMessage = new String(messageIcc.getBody());
//                    LOGGER.info("1. Step:  Received icc message {}", iccMessage);
//                    try {
//                        InfoCtxEncoded infoCtxEncoded = objectMapper.readValue(iccMessage, InfoCtxEncoded.class);
//
//                        return infoCtxEncoded;
//                    } catch (JsonProcessingException e) {
//                        LOGGER.error("Error during parsing icc message ",e);
//                    }
//                    return "aboid not found";
//                })
//                .doOnNext(infoCtxEncoded -> {
//                            LOGGER.info("Mapped  aboid {}", infoCtxEncoded);
//                            String abonnementid = ((InfoCtxEncoded) infoCtxEncoded).getMetaData().getAbonnementid();
//                            requestLogicalDevice(webClient, abonnementid)
//                                    .onErrorResume(err -> {
//                                        LOGGER.info("Error call ldm");
//                                        return Mono.empty();
//                                    })
//                                    .doOnNext(ldeviceAndICC -> requestRenderingEngine(webClient, "")//TODO do somithin with map
//                                            .doOnNext(map -> {
//                                                                sender.send(Flux.range(1, 1)
//                                                                                .map(i -> new OutboundMessage(OMAN_OUT_EXCHANGE, "#", (map.toString()).getBytes())))
//                                                                                .onErrorResume(err -> {
//                                                                                    LOGGER.info("Error send to ses");
//                                                                                    return Mono.empty();
//                                                                                })
//                                                                                .subscribe();
//                                        LOGGER.info("3. Step: Send message to tdc-ses", new String(map.toString()));
//                                    })
//                                    ).subscribe();
//                        }
//                ).subscribe();

    }

    private Flux<Map> requestLogicalDevice(WebClient webClient, String aboid) {
        return webClient
            .get()
            .uri("http://localhost:8085/logicalDevices?aboid="+aboid)
            .retrieve()
            .bodyToFlux(Map.class);
    }


    private Flux<Map> requestRenderingEngine(WebClient webClient, String raw) {
        return webClient
                .post()
                .uri("http://localhost:8099/")
                .contentType(MediaType.APPLICATION_JSON)
                .accept(MediaType.TEXT_XML)
                .body(BodyInserters.fromValue( renderBody ))
                .retrieve()
                .bodyToFlux(Map.class)
                ;
    }

    private boolean filterAboId(Delivery iccContext) {
        return false;
    }


    private Flux<Map> createSESCommand(WebClient webClient) {
        return webClient
                .get()
                .uri("http://localhost:8085/logicalDevices?aboid=ABFAHRTSTAFEL-v4-2022-04-13T080417-460-13ed8b")
                .retrieve()
                .bodyToFlux(Map.class);
    }



    String renderBody = "{\n" +
            "  \n" +
            "  \"deviceContext\": {\n" +
            "    \"notice\": \"This is a test notice\",\n" +
            "    \"outputType\": \"BITMAP\",\n" +
            "    \"screenWidth\": 960,\n" +
            "    \"screenHeight\": 192,\n" +
            "\t\t\"virtualSizeWidth\": 960,\n" +
            "\t\t\"virtualSizeHeight\": 192,\n" +
            "\t\t\"visibleRegionX\": 0,\n" +
            "    \"visibleRegionY\": 128,\n" +
            "\t\t\"visibleRegionWidth\": 960,\n" +
            "\t\t\"visibleRegionHeight\": 64 \n" +
            "    \n" +
            "  },\n" +
            "  \"meta\": {\n" +
            "    \"id\":\"id\",\n" +
            "    \"correlation\": [],\n" +
            "    \"feature\" : \"1\",\n" +
            "    \"version\": \"v4\",\n" +
            "    \"created\": \"2016-11-20T18:43:05.497Z\",\n" +
            "    \"sequence\": {\"long\": 234},\n" +
            "    \"rc\": {\n" +
            "      \"created\": \"2016-11-20T18:43:05.497Z\",\n" +
            "      \"id\": \"9d6e3ee6-3403-42dd-9800-301eb43f5910\"\n" +
            "    },\n" +
            "    \"scheduledTime\": \"2016-11-04T09:51:25.865Z\",\n" +
            "    \"abonnementtyp\": \"ABFAHRTSTAFEL\",\n" +
            "    \"abonnementid\": \"e4fa5e1e-39bd-4af4-9679-9b41eb78e90b\",\n" +
            "    \"templateName\": \"bmp/zt1/typ6/MasterPageLayout.json\",\n" +
            "    \"icc\": {\n" +
            "      \"sequence\": 0,\n" +
            "      \"created\": \"2016-11-04T09:51:22.808Z\",\n" +
            "      \"id\": \"ABFAHRTSTAFEL.v4.6386aa89-e8af-4cce-ad49-3f70f753177d.0\",\n" +
            "      \"version\": \"v4\"\n" +
            "    },\n" +
            "    \"plannedTime\": \"2016-11-04T09:51:22.865Z\",\n" +
            "    \"validUntil\": \"2017-11-04T10:01:22.865Z\",\n" +
            "    \"ic\": {\n" +
            "      \"created\": \"2016-11-04T09:51:22.865Z\",\n" +
            "      \"id\": \"c86a9d05-8810-4d39-8d5e-9d5d5cf09389\"\n" +
            "    },\n" +
            "    \"prio\": 1,\n" +
            "    \"logicalDeviceTarget\": \"ld_some_device\"\n" +
            "  },\n" +
            "  \"body\" : \"\"\n" +
            "}\n";

}


//{"meta":{"version":"1.12.23","prio":1,"abonnementtyp":"ABFAHRTSTAFEL","abonnementid":"ABFAHRTSTAFEL-v4-2022-04-13T080417-460-13ed8b","scheduledTime":"2022-04-16T09:08:35.926Z","validUntil":"2022-04-16T11:55:15.926Z","icc":{"id":"38a7adac-04ef-4025-8284-3366068037fd","created":"2022-04-16T09:08:35.926Z","version":"v3","renderingAction":"OUTPUT"},"ic":{"id":"849c3b3a-9563-423f-9999-142e77ceba6b","created":"2022-04-16T09:08:35.926Z"}},"body":"QXNoIG5hemcgZHVyYmF0dWzDu2ssDQphc2ggbmF6ZyBnaW1iYXR1bCwNCmFzaCBuYXpnIHRocmFrYXR1bMO7aw0KYWdoIGJ1cnp1bS1pc2hpIGtyaW1wYXR1bA=="}

//rabbitmqadmin publish exchange=irisplus.oman.ctrl.in.exchange.it routing_key=test payload='{"meta":{"version":"1.12.23","prio":1,"abonnementtyp":"ABFAHRTSTAFEL","abonnementid":"ABFAHRTSTAFEL-v4-2022-04-13T080417-460-13ed8b","scheduledTime":"2022-04-16T09:08:35.926Z","validUntil":"2022-04-16T11:55:15.926Z","icc":{"id":"38a7adac-04ef-4025-8284-3366068037fd","created":"2022-04-16T09:08:35.926Z","version":"v3","renderingAction":"OUTPUT"},"ic":{"id":"849c3b3a-9563-423f-9999-142e77ceba6b","created":"2022-04-16T09:08:35.926Z"}},"body":"QXNoIG5hemcgZHVyYmF0dWzDu2ssDQphc2ggbmF6ZyBnaW1iYXR1bCwNCmFzaCBuYXpnIHRocmFrYXR1bMO7aw0KYWdoIGJ1cnp1bS1pc2hpIGtyaW1wYXR1bA=="}'




//curl -X POST "http://localhost:8099/" -H "accept: text/plain;charset=UTF-8" -H "Content-Type: application/json;charset=UTF-8" -d '{ "meta": { "templateName": "string", "additionalProp1": {}, "additionalProp2": {}, "additionalProp3": {} }, "body": "string", "deviceContext": { "screenHeight": 0, "screenWidth": 0, "virtualSizeHeight": 0, "virtualSizeWidth": 0, "visibleRegionY": 0, "visibleRegionX": 0, "visibleRegionHeight": 0, "visibleRegionWidth": 0, "outputType": "SES_JSON", "additionalProperties": {} }, "renderingHints": { "additionalProp1": "string", "additionalProp2": "string", "additionalProp3": "string" }}'
//        "meta": {        "version": "1.12.23",        "prio": 1,        "abonnementtyp": "ZUGANZEIGER",        "abonnementid": "b374d801-57cb-40a6-a2ef-30ee8959b998",        "scheduledTime": "2022-04-15T07:57:38.885Z",        "validUntil": "2022-04-15T10:44:18.885Z",        "renderingParameters": {        "renderAsZugtafel": true,        "showsMTFLayout": true        },        "icc": {        "id": "38a7adac-04ef-4025-8284-3366068037fd",        "created": "2022-04-15T07:57:38.885Z",        "version": "v3",        "renderingAction": "OUTPUT"        },        "ic": {        "id": "849c3b3a-9563-423f-9999-142e77ceba6b",        "created": "2022-04-15T07:57:38.885Z"        }        },        "body": "QXNoIG5hemcgZHVyYmF0dWzDu2ssDQphc2ggbmF6ZyBnaW1iYXR1bCwNCmFzaCBuYXpnIHRocmFrYXR1bMO7aw0KYWdoIGJ1cnp1bS1pc2hpIGtyaW1wYXR1bA=="        }
//curl -X POST "http://localhost:8099/" -H "accept: text/plain;charset=UTF-8" -H "Content-Type: application/json;charset=UTF-8" -d '"meta": {"version": "1.12.23", "prio": 1,"abonnementtyp": "ZUGANZEIGER"," "abonnementid": "b374d801-57cb-40a6-a2ef-30ee8959b998"," "scheduledTime": "2022-04-15T07:57:38.885Z"," "validUntil": "2022-04-15T10:44:18.885Z"," "renderingParameters": {" "renderAsZugtafel": true," "showsMTFLayout": true" }," "icc": {" "id": "38a7adac-04ef-4025-8284-3366068037fd"," "created": "2022-04-15T07:57:38.885Z"," "version": "v3"," "renderingAction": "OUTPUT"" }," "ic": {" "id": "849c3b3a-9563-423f-9999-142e77ceba6b"," "created": "2022-04-15T07:57:38.885Z"" }" }," "body": "QXNoIG5hemcgZHVyYmF0dWzDu2ssDQphc2ggbmF6ZyBnaW1iYXR1bCwNCmFzaCBuYXpnIHRocmFrYXR1bMO7aw0KYWdoIGJ1cnp1bS1pc2hpIGtyaW1wYXR1bA==" }'

//
//{





//curl "http://renderingengine-v4.team2/" -H "accept: text/plain;charset=UTF-8" -H "Content-Type: application/json;charset=UTF-8" -d '"meta": {"version": "1.12.23", "prio": 1,"abonnementtyp": "ZUGANZEIGER"," "abonnementid": "b374d801-57cb-40a6-a2ef-30ee8959b998"," "scheduledTime": "2022-04-15T07:57:38.885Z"," "validUntil": "2022-04-15T10:44:18.885Z"," "renderingParameters": {" "renderAsZugtafel": true," "showsMTFLayout": true" }," "icc": {" "id": "38a7adac-04ef-4025-8284-3366068037fd"," "created": "2022-04-15T07:57:38.885Z"," "version": "v3"," "renderingAction": "OUTPUT"" }," "ic": {" "id": "849c3b3a-9563-423f-9999-142e77ceba6b"," "created": "2022-04-15T07:57:38.885Z"" }" }," "body": "QXNoIG5hemcgZHVyYmF0dWzDu2ssDQphc2ggbmF6ZyBnaW1iYXR1bCwNCmFzaCBuYXpnIHRocmFrYXR1bMO7aw0KYWdoIGJ1cnp1bS1pc2hpIGtyaW1wYXR1bA==" }' -v



//
//curl "http://renderingengine-v4.team2/" -H "accept: text/plain;charset=UTF-8" -H "Content-Type: application/json;charset=UTF-8" -d '{ "body": "ew0KICAiZGF0YSI6IHsNCiAgICAiYWxsRWludHJhZyI6IFsNCiAgICAgIHsNCiAgICAgICAgImFsbFJlZmVyZW56ZWludHJhZyI6IHsNCiAgICAgICAgfSwNCiAgICAgICAgImhhdXB0ZWludHJhZyI6IHsNCiAgICAgICAgICAidmVya2VocmxpY2hlc1NvbGwiOiB7DQogICAgICAgICAgfQ0KICAgICAgICB9DQogICAgICB9DQogICAgXQ0KICB9DQp9", "deviceContext": { "notice": "This is a test notice", "outputType": "BITMAP", "screenWidth": 1920, "screenHeight": 1080 }, "meta": { "rc": { "created": "2016-11-20T18:43:05.497Z", "id": "9d6e3ee6-3403-42dd-9800-301eb43f5910" }, "scheduledTime": "2022-04-16T09:08:35.926Z", "abonnementtyp": "ABFAHRTSTAFEL", "abonnementid": "ABFAHRTSTAFEL-v4-2022-04-13T080417-460-13ed8b", "templateName": "html/za3/MasterPageLayout.json", "version": "1.12.23", "prio": 1, "validUntil": "2017-11-04T10:01:22.865Z", "icc": { "sequence": 0, "created": "2016-11-04T09:51:22.808Z", "id": "LIM.v1.6386aa89-e8af-4cce-ad49-3f70f753177d.0", "version": "v1" }, "plannedTime": "2016-11-04T09:51:22.865Z", "ic": { "created": "2016-11-04T09:51:22.865Z", "id": "c86a9d05-8810-4d39-8d5e-9d5d5cf09389" }, "logicalDeviceTarget": "ld_some_device" } }' -v
//
//        curl "http://renderingengine-v4.team2/" -H "accept: text/plain;charset=UTF-8" -H "Content-Type: application/json;charset=UTF-8" -d ''
//
//        { "body": "ew0KICAiZGF0YSI6IHsNCiAgICAiYWxsRWludHJhZyI6IFsNCiAgICAgIHsNCiAgICAgICAgImFsbFJlZmVyZW56ZWludHJhZyI6IHsNCiAgICAgICAgfSwNCiAgICAgICAgImhhdXB0ZWludHJhZyI6IHsNCiAgICAgICAgICAidmVya2VocmxpY2hlc1NvbGwiOiB7DQogICAgICAgICAgfQ0KICAgICAgICB9DQogICAgICB9DQogICAgXQ0KICB9DQp9", "deviceContext": { "notice": "This is a test notice", "outputType": "BITMAP", "screenWidth": 1920, "screenHeight": 1080 }, "meta": { "rc": { "created": "2016-11-20T18:43:05.497Z", "id": "9d6e3ee6-3403-42dd-9800-301eb43f5910" }, "scheduledTime": "2022-04-16T09:08:35.926Z", "abonnementtyp": "ABFAHRTSTAFEL", "abonnementid": "ABFAHRTSTAFEL-v4-2022-04-13T080417-460-13ed8b", "templateName": "html/za3/MasterPageLayout.json", "version": "1", "prio": 1, "validUntil": "2017-11-04T10:01:22.865Z", "icc": { "sequence": 0, "created": "2016-11-04T09:51:22.808Z", "id": "LIM.v1.6386aa89-e8af-4cce-ad49-3f70f753177d.0", "version": "v1" }, "plannedTime": "2016-11-04T09:51:22.865Z", "ic": { "created": "2016-11-04T09:51:22.865Z", "id": "c86a9d05-8810-4d39-8d5e-9d5d5cf09389" }, "logicalDeviceTarget": "ld_some_device" } }